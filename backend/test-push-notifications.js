const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3001';

async function testPushNotifications() {
  console.log('üîî === PRUEBA DEL SISTEMA DE NOTIFICACIONES PUSH ===\n');

  try {
    // 1. Login
    console.log('üîê Iniciando sesi√≥n...');
    const loginResponse = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'empleado1@madrid.es',
        password: 'test123'
      })
    });

    const loginData = await loginResponse.json();
    if (!loginData.success) {
      throw new Error('Login failed: ' + loginData.message);
    }

    const token = loginData.data.tokens.accessToken;
    const userId = loginData.data.user.id;
    console.log(`‚úÖ Usuario logueado: ${userId}\n`);

    // 2. Probar suscripci√≥n push (simulada)
    console.log('üì± Probando suscripci√≥n push...');
    
    const mockSubscription = {
      endpoint: 'https://fcm.googleapis.com/fcm/send/test-endpoint-123',
      keys: {
        p256dh: 'test-p256dh-key',
        auth: 'test-auth-key'
      }
    };

    const subscribeResponse = await fetch(`${API_BASE_URL}/api/push/subscribe`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        subscription: mockSubscription,
        userId: userId
      })
    });

    const subscribeData = await subscribeResponse.json();
    if (subscribeData.success) {
      console.log('‚úÖ Suscripci√≥n push creada exitosamente');
      console.log(`   - Endpoint: ${mockSubscription.endpoint}`);
    } else {
      throw new Error('Subscribe failed: ' + subscribeData.message);
    }

    // 3. Enviar notificaci√≥n de prueba
    console.log('\nüß™ Enviando notificaci√≥n de prueba...');
    const testResponse = await fetch(`${API_BASE_URL}/api/push/test`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: userId,
        title: 'üß™ Notificaci√≥n de prueba',
        body: 'Las notificaciones push funcionan correctamente!',
        type: 'test'
      })
    });

    const testData = await testResponse.json();
    if (testData.success) {
      console.log('‚úÖ Notificaci√≥n de prueba enviada');
      console.log(`   - Enviadas: ${testData.stats.sent}`);
      console.log(`   - Fallidas: ${testData.stats.failed}`);
      console.log(`   - Total: ${testData.stats.total}`);
    } else {
      throw new Error('Test notification failed: ' + testData.message);
    }

    // 4. Probar notificaci√≥n autom√°tica con mensaje
    console.log('\nüí¨ Probando notificaci√≥n autom√°tica...');
    
    // Buscar un usuario destinatario
    const searchResponse = await fetch(`${API_BASE_URL}/api/messaging/users/search?q=empleado2`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    const searchData = await searchResponse.json();
    if (searchData.success && searchData.data.length > 0) {
      const recipientUser = searchData.data[0];
      console.log(`üë§ Usuario destinatario: ${recipientUser.email}`);

      // Crear suscripci√≥n para el destinatario (simulada)
      const recipient2Subscription = {
        endpoint: 'https://fcm.googleapis.com/fcm/send/test-endpoint-456',
        keys: {
          p256dh: 'test-p256dh-key-2',
          auth: 'test-auth-key-2'
        }
      };

      // Login como usuario 2 para crear su suscripci√≥n
      const login2Response = await fetch(`${API_BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: recipientUser.email,
          password: 'test123'
        })
      });

      const login2Data = await login2Response.json();
      if (login2Data.success) {
        const token2 = login2Data.data.tokens.accessToken;
        
        // Crear suscripci√≥n para usuario 2
        await fetch(`${API_BASE_URL}/api/push/subscribe`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token2}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            subscription: recipient2Subscription,
            userId: recipientUser.id
          })
        });

        console.log('‚úÖ Suscripci√≥n creada para destinatario');
      }

      // Enviar mensaje (esto debe generar notificaci√≥n autom√°tica)
      const messageResponse = await fetch(`${API_BASE_URL}/api/messaging/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipientId: recipientUser.id,
          content: '¬°Hola! Este mensaje deber√≠a generar una notificaci√≥n push autom√°tica üîî',
          subject: ''
        })
      });

      const messageData = await messageResponse.json();
      if (messageData.success) {
        console.log('‚úÖ Mensaje enviado con notificaci√≥n autom√°tica');
        console.log(`   - ID del mensaje: ${messageData.data.id}`);
      } else {
        throw new Error('Message failed: ' + messageData.message);
      }
    }

    // 5. Probar desuscripci√≥n
    console.log('\nüîï Probando desuscripci√≥n...');
    const unsubscribeResponse = await fetch(`${API_BASE_URL}/api/push/unsubscribe`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        endpoint: mockSubscription.endpoint,
        userId: userId
      })
    });

    const unsubscribeData = await unsubscribeResponse.json();
    if (unsubscribeData.success) {
      console.log('‚úÖ Desuscripci√≥n exitosa');
      console.log(`   - Suscripciones actualizadas: ${unsubscribeData.updated}`);
    } else {
      throw new Error('Unsubscribe failed: ' + unsubscribeData.message);
    }

    console.log('\nüéâ ¬°TODAS LAS PRUEBAS DE PUSH NOTIFICATIONS PASARON!');
    console.log('\nüìã RESUMEN:');
    console.log('‚úÖ Suscripci√≥n a notificaciones push funciona');
    console.log('‚úÖ Notificaciones de prueba funcionan');
    console.log('‚úÖ Notificaciones autom√°ticas por mensajes funcionan');
    console.log('‚úÖ Desuscripci√≥n funciona');
    console.log('‚úÖ APIs de backend funcionan correctamente');
    
    console.log('\nüöÄ El sistema de notificaciones push est√° listo!');
    console.log('\nüìù PR√ìXIMOS PASOS:');
    console.log('1. Instalar librer√≠a web-push para env√≠o real');
    console.log('2. Configurar VAPID keys en producci√≥n');
    console.log('3. Probar en navegador con Service Worker');

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Ejecutar pruebas
testPushNotifications().catch(console.error);